// vite.config.ts
import { resolve } from "path";
import { defineConfig } from "file:///C:/Git/ChocolateLib/state/node_modules/vite/dist/node/index.js";

// package.json
var name = "@chocolatelib/state";
var dependencies = {
  "@chocolatelib/result": "^0.0.4"
};

// vite.config.ts
import dts from "file:///C:/Git/ChocolateLib/state/node_modules/vite-plugin-dts/dist/index.mjs";
import libCss from "file:///C:/Git/ChocolateLib/state/node_modules/vite-plugin-libcss/index.js";
var __vite_injected_original_dirname = "C:\\Git\\ChocolateLib\\state";
var vite_config_default = defineConfig(({ command, mode, ssrBuild }) => {
  console.log(command, mode);
  switch (command) {
    case "serve":
      if (mode === "pages") {
        return {
          server: {
            host: true,
            port: 666
          },
          build: {
            outDir: "../docs",
            emptyOutDir: true
          },
          preview: {
            port: 666
          },
          root: "./pages",
          base: "/pages/"
        };
      } else {
        return {
          server: {
            host: true,
            port: 999
          },
          build: {
            outDir: "./dist"
          },
          preview: {
            port: 999
          },
          root: "./cypress/pages"
        };
      }
    case "build":
      if (mode === "pages") {
        return {
          root: "./pages",
          build: {
            outDir: "../docs",
            emptyOutDir: true
          },
          base: ""
        };
      } else if (mode === "tests" || mode === "production") {
        return {
          root: "./cypress/pages",
          build: {
            outDir: "./dist",
            target: "esnext"
          },
          base: ""
        };
      } else {
        return {
          build: {
            lib: {
              entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
              name,
              fileName: "index",
              formats: ["es", "cjs"]
            },
            rollupOptions: {
              external: Object.keys(dependencies)
            },
            target: "es2022"
          },
          plugins: [
            dts({ rollupTypes: true }),
            libCss()
          ]
        };
      }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
